"""
This type stub file was generated by pyright.
"""

from fasthtml.basics import FastHTML

__all__ = ["FastHTMLWithLiveReload"]
LIVE_RELOAD_SCRIPT = ...
async def live_reload_websocket(websocket): # -> None:
    ...

class FastHTMLWithLiveReload(FastHTML):
    """
    `FastHTMLWithLiveReload` enables live reloading.
    This means that any code changes saved on the server will automatically
    trigger a reload of both the server and browser window.

    How does it work?
      - a websocket is created at `/live-reload`
      - a small js snippet `LIVE_RELOAD_SCRIPT` is injected into each webpage
      - this snippet connects to the websocket at `/live-reload` and listens for an `onclose` event
      - when the `onclose` event is detected the browser is reloaded

    Why do we listen for an `onclose` event?
      When code changes are saved the server automatically reloads if the --reload flag is set.
      The server reload kills the websocket connection. The `onclose` event serves as a proxy
      for "developer has saved some changes".

    Usage
        >>> from fasthtml.common import *
        >>> app = FastHTMLWithLiveReload()

        Run:
            run_uv()
    """
    LIVE_RELOAD_ROUTE = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


